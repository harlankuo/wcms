<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
                     http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
                     http://www.springframework.org/schema/context 
                     http://www.springframework.org/schema/context/spring-context-3.0.xsd 
                     http://www.springframework.org/schema/aop 
                     http://www.springframework.org/schema/aop/spring-aop-3.0.xsd 
                     http://www.springframework.org/schema/tx 
                     http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
                     http://www.springframework.org/schema/mvc  
                     http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd">

	<!-- 国际化配置 参考： http://hi.baidu.com/sonmeika/blog/item/8069b2dd7db1c9395882dd29.html 
		<bean id="localeResolver" class="org.springframework.web.servlet.i18n.AcceptHeaderLocaleResolver"> 
		</bean> -->

	<!--配置视图解析器 -->
	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/views/" />
		<property name="suffix" value=".jsp" /><!--可为空,方便实现自已的依据扩展名来选择视图解释类的逻辑 -->
		<property name="viewClass">
			<value>org.springframework.web.servlet.view.InternalResourceView
			</value>
		</property>
	</bean>
	<!-- 自动注解支持 -->
	<mvc:annotation-driven />

	<!--不拦截静态的文件，如jpg,js,css -->
	<mvc:resources mapping="/static/**" location="/static/" />

	<!-- 配置登录注解interceptor, 从而过滤所有标注登录注解的spring-mvc方法 -->
	<mvc:interceptors>
		<!-- <mvc:interceptor> <mvc:mapping path="/views/*"/> <bean class=""></bean> 
			</mvc:interceptor> -->
		<bean
			class="com.harlankuo.hyacinth.wcms.web.interceptor.LoginAnnotationInterceptor">
			<!-- 第一种在自定义的过滤器中过滤资源路径 -->
			<property name="uncheckUrls">
				<list>
					<value>/static/</value>
				</list>
			</property>
			<!-- 第二种在自定义的过滤器中过滤Handler -->
			<property name="uncheckHandlers">
				<list>
					<value>org.springframework.web.servlet.resource.ResourceHttpRequestHandler</value>
				</list>
			</property>
		</bean>
		<bean
			class="com.harlankuo.hyacinth.wcms.web.interceptor.AuthorityAnnotationInterceptor">
			<!-- 第一种在自定义的过滤器中过滤资源路径 -->
			<property name="uncheckUrls">
				<list>
					<value>/static/</value>
				</list>
			</property>
			<!-- 第二种在自定义的过滤器中过滤Handler -->
			<property name="uncheckHandlers">
				<list>
					<value>org.springframework.web.servlet.resource.ResourceHttpRequestHandler</value>
				</list>
			</property>
		</bean>
	</mvc:interceptors>

	<!-- 配置首页 -->
	<mvc:view-controller path="/" view-name="login" />

	<!-- 对包中的所有类进行扫描，以完成Bean创建和自动依赖注入的功能 -->
	<context:component-scan base-package="com.harlankuo.hyacinth.wcms" />
	<!-- 允许定义过滤器将基包下的某些类纳入或排除 <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/> -->
	<!-- 启动Spring MVC的注解功能，完成请求和注解POJO的映射 <bean class="org.springframework.web.portlet.mvc.annotation.AnnotationMethodHandlerAdapter"/> -->

	<bean
		class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping">
	</bean>
	<!-- 支持JSON数据格式 -->
	<bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="mappingJacksonHttpMessageConverter" />
			</list>
		</property>
	</bean>
	<bean id="mappingJacksonHttpMessageConverter"
		class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>application/json;charset=UTF-8</value>
				<value>text/html;charset=UTF-8</value>
			</list>
		</property>
	</bean>

	<bean id="captchaProducer" class="com.google.code.kaptcha.impl.DefaultKaptcha">
		<property name="config">
			<bean class="com.google.code.kaptcha.util.Config">
				<!--通过构造函数注入属性值 -->
				<constructor-arg type="java.util.Properties">
					<props>
						<!-- 验证码宽度 -->
						<prop key="kaptcha.image.width">90</prop>
						<!-- 验证码高度 -->
						<prop key="kaptcha.image.height">30</prop>
						<!-- 生成验证码内容范围 -->
						<prop key="kaptcha.textproducer.char.string">1234567890abcdefghijklmnpqrstuvwxyz</prop>
						<!-- 验证码个数 -->
						<prop key="kaptcha.textproducer.char.length">5</prop>
						<!-- 是否有边框 -->
						<prop key="kaptcha.border">no</prop>
						<!-- 验证码字体颜色 -->
						<prop key="kaptcha.textproducer.font.color">red</prop>
						<!-- 验证码字体大小 -->
						<prop key="kaptcha.textproducer.font.size">22</prop>
						<!-- 验证码所属字体样式 -->
						<prop key="kaptcha.textproducer.font.names">Arial, Courier</prop>
						<prop key="kaptcha.background.clear.from">white</prop>
						<prop key="kaptcha.background.clear.to">white</prop>
						<prop key="kaptcha.obscurificator.impl">com.google.code.kaptcha.impl.ShadowGimpy</prop>
						<prop key="kaptcha.noise.impl">com.google.code.kaptcha.impl.NoNoise</prop>
						<!-- 干扰线颜色 -->
						<prop key="kaptcha.noise.color">red</prop>
						<!-- 验证码文本字符间距 -->
						<prop key="kaptcha.textproducer.char.space">2</prop>
					</props>
				</constructor-arg>
			</bean>
		</property>
	</bean>

	<!-- 处理静态资源 -->
	<!-- <bean id="simpleUrlHandlerMapping" class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping"> 
		<property name="urlMap"> <map> <entry key="/static/**" value-ref="imageResource"/> 
		</map> </property> </bean> <bean id="imageResource" class="org.springframework.web.servlet.resource.ResourceHttpRequestHandler"> 
		<property name="locations"> <list> <value>/static/</value> </list> </property> 
		</bean> <bean id="httpHandlerAdapter" class="org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter" 
		/> -->
	<!-- 处理静态资源 end -->

</beans>
