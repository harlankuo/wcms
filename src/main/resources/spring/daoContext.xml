<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
                     http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
                     http://www.springframework.org/schema/context 
                     http://www.springframework.org/schema/context/spring-context-3.0.xsd 
                     http://www.springframework.org/schema/aop 
                     http://www.springframework.org/schema/aop/spring-aop-3.0.xsd 
                     http://www.springframework.org/schema/tx 
                     http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
                     http://www.springframework.org/schema/mvc  
                     http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd">

	<!-- 配置数据源 -->
	<!-- <bean id="DataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource"> 
		<property name="driverClassName" value="com.mysql.jdbc.Driver" /> <property 
		name="url" value="jdbc:mysql://localhost:3306/wcms" /> <property name="username" 
		value="root" /> <property name="password" value="root" /> </bean> -->
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">  
    	<property name="locations">  
        	<list>  
            	<value>classpath*:jdbc.properties</value>  
        	</list>  
    	</property>  
	</bean>  
	<bean id="DataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="driverClass" value="${jdbc.driver}" /> 
		<property name="jdbcUrl" value="${jdbc.url}" />
		<!--用户名。Default: null -->
		<property name="user" value="${jdbc.username}"></property>
		<!--密码。Default: null -->
		<property name="password" value="${jdbc.password}"></property>
		<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
		<property name="acquireIncrement" value="${jdbc.acquireIncrement}"></property>
		<!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->
		<property name="acquireRetryAttempts" value="30"></property>
		<!--两次连接中间隔时间，单位毫秒。Default: 1000 -->
		<property name="acquireRetryDelay" value="1000"></property>
		<!--连接关闭时默认将所有未提交的操作回滚。Default: false -->
		<property name="autoCommitOnClose" value="false"></property>
		<!--c3p0将建一张名为Test的空表，并使用其自带的查询语句进行测试。如果定义了这个参数那么 属性preferredTestQuery将被忽略。你不能在这张Test表上进行任何操作，它将只供c3p0测试 
			使用。Default: null -->
		<!-- <property name="automaticTestTable" value="Test"></property> -->
		<!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效 保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试 
			获取连接失败后该数据源将申明已断开并永久关闭。Default: false -->
		<!-- <property name="breakAfterAcquireFailure" value="false"></property> -->
		<!--当连接池用完时客户端调用getConnection()后等待获取新连接的时间，超时后将抛出 SQLException,如设为0则无限期等待。单位毫秒。Default:  0 -->
		<property name="checkoutTimeout" value="${jdbc.checkoutTimeout}"></property>
		<!--通过实现ConnectionTester或QueryConnectionTester的类来测试连接。类名需制定全路径。 Default: 
			com.mchange.v2.c3p0.impl.DefaultConnectionTester -->
		<!-- <property name="connectionTesterClassName" ></property> -->
		<!--指定c3p0 libraries的路径，如果（通常都是这样）在本地即可获得那么无需设置，默认null即可 Default: null -->
		<!-- <property name="factoryClassLocation"></property> -->
		<!--Strongly disrecommended. Setting this to true may lead to subtle and 
			bizarre bugs. （文档原文）作者强烈建议不使用的一个属性 -->
		<!-- <property name="forceIgnoreUnresolvedTransactions" value="false"></property> -->
		<!--每60秒检查所有连接池中的空闲连接。Default: 0 -->
		<property name="idleConnectionTestPeriod" value="${jdbc.idleConnectionTestPeriod}"></property>
		<!--初始化时获取三个连接，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
		<property name="initialPoolSize" value="${jdbc.initialPoolSize}"></property>
		<!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
		<property name="maxIdleTime" value="${jdbc.maxIdleTime}"></property>
		<!--连接池中保留的最大连接数。Default: 15 -->
		<property name="maxPoolSize" value="${jdbc.maxPoolSize}"></property>
		<!-- 指定连接池中保留的最小连接数-->  
        <property name="minPoolSize" value="${jdbc.minPoolSize}"/>  
		<!--JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements 属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。 
			如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0 -->
		<property name="maxStatements" value="${jdbc.maxStatements}"></property>
		<!--maxStatementsPerConnection定义了连接池内单个连接所拥有的最大缓存statements数。Default: 0 -->
		<property name="maxStatementsPerConnection" value="20"></property>
		<!--c3p0是异步操作的，缓慢的JDBC操作通过帮助进程完成。扩展这些操作可以有效的提升性能 通过多线程实现多个操作同时被执行。Default: 3 -->
		<property name="numHelperThreads" value="3"></property>
		<!--当用户调用getConnection()时使root用户成为去获取连接的用户。主要用于连接池连接非c3p0 的数据源时。Default: null -->
		<!-- <property name="overrideDefaultUser"></property> -->
		<!--与overrideDefaultUser参数对应使用的一个参数。Default: null -->
		<!-- <property name="overrideDefaultPassword"></property> -->
		<!--定义所有连接测试都执行的测试语句。在使用连接测试的情况下这个一显著提高测试速度。注意： 测试的表必须在初始数据源的时候就存在。Default: null -->
		<!-- <property name="preferredTestQuery" value="select id from test where id=1"></property> -->
		<!--用户修改系统配置参数执行前最多等待300秒。Default: 300 -->
		<property name="propertyCycle" value="300"></property>
		<!--因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的 时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable 
			等方法来提升连接测试的性能。Default: false -->
		<!-- <property name="testConnectionOnCheckout" value="false"></property> -->
		<!--如果设为true那么在取得连接的同时将校验连接的有效性。Default: false -->
		<!-- <property name="testConnectionOnCheckin" value="true"></property> -->
	</bean>

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation" value="classpath:/mybatis/SqlMapConfig.xml"></property>
		<property name="dataSource" ref="DataSource" />
		<property name="mapperLocations"
			value="classpath*:com/harlankuo/hyacinth/wcms/model/mapper/*Mapper.xml" />
		<property name="plugins">
			<array>
				<ref bean="paginationInterceptor" />
			</array>
		</property>
	</bean>

	<bean id="paginationInterceptor"
		class="com.harlankuo.hyacinth.wcms.pagination.interceptor.PaginationInterceptor">

	</bean>

	<!-- 使用SqlSessionTemplate -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate"
		scope="prototype">
		<constructor-arg index="0" ref="sqlSessionFactory" />
		<!-- 如果想要进行批量操作可加入这个属性 -->
		<constructor-arg index="1" value="BATCH" />
	</bean>

	<!-- 使用SqlSessionDaoSupport 需要注入sqlSessionFactory -->
	<bean id="baseDaoImpl" class="com.harlankuo.hyacinth.wcms.dao.impl.BaseDaoImpl">
		<property name="sqlSessionFactory" ref="sqlSessionFactory" />
	</bean>

	<!-- 配置事务管理器 -->
	<bean id="TransactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="DataSource" />
	</bean>
</beans>