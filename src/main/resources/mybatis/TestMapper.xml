<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 这里namespace必须是接口的路径，不然要运行的时候要报错 "is not known to the MapperRegistry" -->
<mapper namespace="com.hl.usersmanager.dao.ILoginMapper">
	<!-- 这里的id必须和接口中的方法名相同，不然运行的时候也要报错  -->
	<select id="findLogin" resultMap="findLoginResultMap">
		<!-- 这里sql结尾不能加分号，否则报“ORA-00911”的错误  -->
		     select * from login inner join users on login.user_id=users.id   
	</select>
	<!-- 自定义映射关系  -->
	<resultMap type="Login" id="findLoginResultMap"><!-- 标记结果作为ID 可以帮助提高整体效能  -->
		<id property="id" column="id" /><!-- 注入到字段或JavaBean 属性的普通结果  -->
		<result property="loginName" column="loginName" />
		<result property="passWord" column="passWord" />
		<result property="loginTime" column="loginTime" /><!-- 一个复杂的类型关联；许多结果将包成这种类型 (一对一映射)  -->
		<association property="users" column="user_id" javaType="Users">
			<id property="id" column="id" />
			<result property="name" column="name" />
			<result property="age" column="age" />
			<result property="phone" column="phone" />
		</association>
	</resultMap>
	<select id="findLoginLogInfo" resultMap="findLoginLogInfoResultMap">select *,loginLog.id as log_id,users.id as users_id from login inner join users on login.user_id=users.id left join loginLog on loginloginLog.login_id=login.id      
	</select>
	<resultMap type="Login" id="findLoginLogInfoResultMap">
		<id property="id" column="id" />
		<result property="loginName" column="loginName" />
		<result property="passWord" column="passWord" />
		<result property="loginTime" column="loginTime" />
		<association property="users" column="user_id" javaType="Users">
			<id property="id" column="users_id" />
			<result property="name" column="name" />
			<result property="age" column="age" />
			<result property="phone" column="phone" />
		</association><!-- 复杂类型的集合 (一对多映射)  -->
		<collection property="loginLogs" ofType="LoginLog">
			<id property="id" column="log_id" />
			<result property="loginTimeLog" column="loginTimeLog" />
		</collection>
	</resultMap>
</mapper>


<!-- mapper标签有个namespace，指向dao层的接口（这里，顺便说一下，我们使用Spring3+mybatis+mysql整合，dao层只需要一个接口就行了，不再需要实现类。 
	mybatis会自动创建代理类完成数据查询及封装，这个查询条件及封装依据就取决于我们这里的mappers映射文件。另外，如果特殊的操作，比如数据库备份之类，你可以手动创建实现类完成操作，附件里面有实例。） 
	mybatis的增、删、改、查对应相应的insert、delete、update、select标签。注意标签的id一定要与接口中的方法名相同。 -->